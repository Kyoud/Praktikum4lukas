// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "fileservice.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
#include <fstream>

using std::ios;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class fileserviceHandler : virtual public fileserviceIf {
 public:
  fileserviceHandler() {
	std::cout << "Server ready" << std::endl;
  }

  void download(FileChunk& _return, const std::string& fileName) {
	// Your implementation goes here
	std::cout << "Client requested download for file: " << fileName << std::endl;
	// Check if file exists on server
	if (std::ifstream("../server_files/" + fileName))
	{
	     	std::cout << "Requested file exists" << std::endl;
		std::cout << "_return Size: " << _return.totalFileSize << std::endl << " _return Offset: " << _return.Offset << std::endl;
		// Open the file
		std::ifstream file;
		file.open("../server_files/" + fileName);
		if(!file.is_open())
		return;

		// Get the length of the file
		file.seekg(0, ios::end);
		size_t fileSize = file.tellg();
		file.seekg(0, ios::beg);

		// Create a vector to hold all the bytes in this file
		std::vector<char> data(fileSize, 0);

		// Read the file
		file.read(&data[0], fileSize);

		// Chunk Vector
		std::vector<char> chunkData;


		std::cout << "File Size: " << fileSize << " Byte" << std::endl;

		// Split byte vector in 100kByte chunks
		for(int i=_return.Offset; i<fileSize;i++){
			chunkData.push_back(data.at(i));
			if((i%100000==0 && i!=0)){
				// Split here
				//std::cout << "\n";
				//std::cout << "File Size: " << fileSize << " Byte" << std::endl;
				_return.totalFileSize = fileSize;
				_return.Offset = i;
				_return.data.insert(std::end(_return.data), std::begin(chunkData), std::end(chunkData));
				return;
			}
		}
		
		// Rest of file or file too small for chunks
		_return.totalFileSize = fileSize;
		_return.Offset = 0;
		_return.data.insert(std::end(_return.data), std::begin(chunkData), std::end(chunkData));
		return;
		//std::cout << "Download of file " << fileName << " completed." << std::endl;
	} else {
		std::cout << "Requested file does not exist" << std::endl;
	}
	return;
  }

  bool upload(const std::string& fileName, const int64_t currentOffset, const int64_t totalFilesize, const FileChunk& chunk) {
    // Your implementation goes here
    printf("upload\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<fileserviceHandler> handler(new fileserviceHandler());
  shared_ptr<TProcessor> processor(new fileserviceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

