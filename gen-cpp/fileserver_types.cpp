/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "fileserver_types.h"

#include <algorithm>



const char* FileChunk::ascii_fingerprint = "DA961D3EDBF197CE032467B58430B53D";
const uint8_t FileChunk::binary_fingerprint[16] = {0xDA,0x96,0x1D,0x3E,0xDB,0xF1,0x97,0xCE,0x03,0x24,0x67,0xB5,0x84,0x30,0xB5,0x3D};

uint32_t FileChunk::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->data.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->data[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->newOffset);
          this->__isset.newOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalFileSize);
          this->__isset.totalFileSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileChunk::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FileChunk");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->data.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->data.begin(); _iter5 != this->data.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newOffset", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->newOffset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalFileSize", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->totalFileSize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileChunk &a, FileChunk &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.newOffset, b.newOffset);
  swap(a.totalFileSize, b.totalFileSize);
  swap(a.__isset, b.__isset);
}


