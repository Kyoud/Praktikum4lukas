/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fileserver_TYPES_H
#define fileserver_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _FileChunk__isset {
  _FileChunk__isset() : data(false), newOffset(false), totalFileSize(false) {}
  bool data;
  bool newOffset;
  bool totalFileSize;
} _FileChunk__isset;

class FileChunk {
 public:

  static const char* ascii_fingerprint; // = "DA961D3EDBF197CE032467B58430B53D";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x96,0x1D,0x3E,0xDB,0xF1,0x97,0xCE,0x03,0x24,0x67,0xB5,0x84,0x30,0xB5,0x3D};

  FileChunk() : newOffset(0), totalFileSize(0) {
  }

  virtual ~FileChunk() throw() {}

  std::vector<int8_t>  data;
  int64_t newOffset;
  int64_t totalFileSize;

  _FileChunk__isset __isset;

  void __set_data(const std::vector<int8_t> & val) {
    data = val;
  }

  void __set_newOffset(const int64_t val) {
    newOffset = val;
  }

  void __set_totalFileSize(const int64_t val) {
    totalFileSize = val;
  }

  bool operator == (const FileChunk & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(newOffset == rhs.newOffset))
      return false;
    if (!(totalFileSize == rhs.totalFileSize))
      return false;
    return true;
  }
  bool operator != (const FileChunk &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileChunk & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FileChunk &a, FileChunk &b);



#endif
