/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fileservice_H
#define fileservice_H

#include <thrift/TDispatchProcessor.h>
#include "fileserver_types.h"



class fileserviceIf {
 public:
  virtual ~fileserviceIf() {}
  virtual void download(FileChunk& _return, const std::string& fileName, const int64_t offset) = 0;
  virtual bool upload(const std::string& fileName, const int64_t currentOffset, const int64_t totalFilesize, const FileChunk& chunk) = 0;
};

class fileserviceIfFactory {
 public:
  typedef fileserviceIf Handler;

  virtual ~fileserviceIfFactory() {}

  virtual fileserviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(fileserviceIf* /* handler */) = 0;
};

class fileserviceIfSingletonFactory : virtual public fileserviceIfFactory {
 public:
  fileserviceIfSingletonFactory(const boost::shared_ptr<fileserviceIf>& iface) : iface_(iface) {}
  virtual ~fileserviceIfSingletonFactory() {}

  virtual fileserviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(fileserviceIf* /* handler */) {}

 protected:
  boost::shared_ptr<fileserviceIf> iface_;
};

class fileserviceNull : virtual public fileserviceIf {
 public:
  virtual ~fileserviceNull() {}
  void download(FileChunk& /* _return */, const std::string& /* fileName */, const int64_t /* offset */) {
    return;
  }
  bool upload(const std::string& /* fileName */, const int64_t /* currentOffset */, const int64_t /* totalFilesize */, const FileChunk& /* chunk */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _fileservice_download_args__isset {
  _fileservice_download_args__isset() : fileName(false), offset(false) {}
  bool fileName;
  bool offset;
} _fileservice_download_args__isset;

class fileservice_download_args {
 public:

  fileservice_download_args() : fileName(), offset(0) {
  }

  virtual ~fileservice_download_args() throw() {}

  std::string fileName;
  int64_t offset;

  _fileservice_download_args__isset __isset;

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  bool operator == (const fileservice_download_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    if (!(offset == rhs.offset))
      return false;
    return true;
  }
  bool operator != (const fileservice_download_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fileservice_download_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fileservice_download_pargs {
 public:


  virtual ~fileservice_download_pargs() throw() {}

  const std::string* fileName;
  const int64_t* offset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fileservice_download_result__isset {
  _fileservice_download_result__isset() : success(false) {}
  bool success;
} _fileservice_download_result__isset;

class fileservice_download_result {
 public:

  fileservice_download_result() {
  }

  virtual ~fileservice_download_result() throw() {}

  FileChunk success;

  _fileservice_download_result__isset __isset;

  void __set_success(const FileChunk& val) {
    success = val;
  }

  bool operator == (const fileservice_download_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fileservice_download_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fileservice_download_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fileservice_download_presult__isset {
  _fileservice_download_presult__isset() : success(false) {}
  bool success;
} _fileservice_download_presult__isset;

class fileservice_download_presult {
 public:


  virtual ~fileservice_download_presult() throw() {}

  FileChunk* success;

  _fileservice_download_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fileservice_upload_args__isset {
  _fileservice_upload_args__isset() : fileName(false), currentOffset(false), totalFilesize(false), chunk(false) {}
  bool fileName;
  bool currentOffset;
  bool totalFilesize;
  bool chunk;
} _fileservice_upload_args__isset;

class fileservice_upload_args {
 public:

  fileservice_upload_args() : fileName(), currentOffset(0), totalFilesize(0) {
  }

  virtual ~fileservice_upload_args() throw() {}

  std::string fileName;
  int64_t currentOffset;
  int64_t totalFilesize;
  FileChunk chunk;

  _fileservice_upload_args__isset __isset;

  void __set_fileName(const std::string& val) {
    fileName = val;
  }

  void __set_currentOffset(const int64_t val) {
    currentOffset = val;
  }

  void __set_totalFilesize(const int64_t val) {
    totalFilesize = val;
  }

  void __set_chunk(const FileChunk& val) {
    chunk = val;
  }

  bool operator == (const fileservice_upload_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    if (!(currentOffset == rhs.currentOffset))
      return false;
    if (!(totalFilesize == rhs.totalFilesize))
      return false;
    if (!(chunk == rhs.chunk))
      return false;
    return true;
  }
  bool operator != (const fileservice_upload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fileservice_upload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fileservice_upload_pargs {
 public:


  virtual ~fileservice_upload_pargs() throw() {}

  const std::string* fileName;
  const int64_t* currentOffset;
  const int64_t* totalFilesize;
  const FileChunk* chunk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fileservice_upload_result__isset {
  _fileservice_upload_result__isset() : success(false) {}
  bool success;
} _fileservice_upload_result__isset;

class fileservice_upload_result {
 public:

  fileservice_upload_result() : success(0) {
  }

  virtual ~fileservice_upload_result() throw() {}

  bool success;

  _fileservice_upload_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const fileservice_upload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fileservice_upload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fileservice_upload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fileservice_upload_presult__isset {
  _fileservice_upload_presult__isset() : success(false) {}
  bool success;
} _fileservice_upload_presult__isset;

class fileservice_upload_presult {
 public:


  virtual ~fileservice_upload_presult() throw() {}

  bool* success;

  _fileservice_upload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class fileserviceClient : virtual public fileserviceIf {
 public:
  fileserviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  fileserviceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void download(FileChunk& _return, const std::string& fileName, const int64_t offset);
  void send_download(const std::string& fileName, const int64_t offset);
  void recv_download(FileChunk& _return);
  bool upload(const std::string& fileName, const int64_t currentOffset, const int64_t totalFilesize, const FileChunk& chunk);
  void send_upload(const std::string& fileName, const int64_t currentOffset, const int64_t totalFilesize, const FileChunk& chunk);
  bool recv_upload();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class fileserviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<fileserviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (fileserviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_download(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  fileserviceProcessor(boost::shared_ptr<fileserviceIf> iface) :
    iface_(iface) {
    processMap_["download"] = &fileserviceProcessor::process_download;
    processMap_["upload"] = &fileserviceProcessor::process_upload;
  }

  virtual ~fileserviceProcessor() {}
};

class fileserviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  fileserviceProcessorFactory(const ::boost::shared_ptr< fileserviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< fileserviceIfFactory > handlerFactory_;
};

class fileserviceMultiface : virtual public fileserviceIf {
 public:
  fileserviceMultiface(std::vector<boost::shared_ptr<fileserviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~fileserviceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<fileserviceIf> > ifaces_;
  fileserviceMultiface() {}
  void add(boost::shared_ptr<fileserviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void download(FileChunk& _return, const std::string& fileName, const int64_t offset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->download(_return, fileName, offset);
    }
    ifaces_[i]->download(_return, fileName, offset);
    return;
  }

  bool upload(const std::string& fileName, const int64_t currentOffset, const int64_t totalFilesize, const FileChunk& chunk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upload(fileName, currentOffset, totalFilesize, chunk);
    }
    return ifaces_[i]->upload(fileName, currentOffset, totalFilesize, chunk);
  }

};



#endif
